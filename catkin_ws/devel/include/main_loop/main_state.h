// Generated by gencpp from file main_loop/main_state.msg
// DO NOT EDIT!


#ifndef MAIN_LOOP_MESSAGE_MAIN_STATE_H
#define MAIN_LOOP_MESSAGE_MAIN_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_loop
{
template <class ContainerAllocator>
struct main_state_
{
  typedef main_state_<ContainerAllocator> Type;

  main_state_()
    : status(0)
    , robot_state()
    , robot_case()
    , pos()
    , is_blocked(false)
    , servo_state(0)
    , stepper_state(0)
    , hand_state(0)
    , action_done(0)
    , kill_mission(0)
    , goal_covered_counter(0)  {
    }
  main_state_(const ContainerAllocator& _alloc)
    : status(0)
    , robot_state(_alloc)
    , robot_case(_alloc)
    , pos(_alloc)
    , is_blocked(false)
    , servo_state(0)
    , stepper_state(0)
    , hand_state(0)
    , action_done(0)
    , kill_mission(0)
    , goal_covered_counter(0)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_state_type;
  _robot_state_type robot_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_case_type;
  _robot_case_type robot_case;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pos_type;
  _pos_type pos;

   typedef uint8_t _is_blocked_type;
  _is_blocked_type is_blocked;

   typedef int32_t _servo_state_type;
  _servo_state_type servo_state;

   typedef int32_t _stepper_state_type;
  _stepper_state_type stepper_state;

   typedef int32_t _hand_state_type;
  _hand_state_type hand_state;

   typedef int32_t _action_done_type;
  _action_done_type action_done;

   typedef int32_t _kill_mission_type;
  _kill_mission_type kill_mission;

   typedef int32_t _goal_covered_counter_type;
  _goal_covered_counter_type goal_covered_counter;





  typedef boost::shared_ptr< ::main_loop::main_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_loop::main_state_<ContainerAllocator> const> ConstPtr;

}; // struct main_state_

typedef ::main_loop::main_state_<std::allocator<void> > main_state;

typedef boost::shared_ptr< ::main_loop::main_state > main_statePtr;
typedef boost::shared_ptr< ::main_loop::main_state const> main_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_loop::main_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_loop::main_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace main_loop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'main_loop': ['/home/frank/catkin_ws/src/main_loop/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::main_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::main_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::main_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::main_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::main_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::main_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_loop::main_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71019ac3a3fa7fa9229e3eb63069ffbc";
  }

  static const char* value(const ::main_loop::main_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71019ac3a3fa7fa9ULL;
  static const uint64_t static_value2 = 0x229e3eb63069ffbcULL;
};

template<class ContainerAllocator>
struct DataType< ::main_loop::main_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_loop/main_state";
  }

  static const char* value(const ::main_loop::main_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_loop::main_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n"
"string robot_state\n"
"string robot_case\n"
"int32[] pos\n"
"bool is_blocked\n"
"int32 servo_state\n"
"int32 stepper_state\n"
"int32 hand_state\n"
"int32 action_done\n"
"int32 kill_mission\n"
"int32 goal_covered_counter\n"
"\n"
"\n"
;
  }

  static const char* value(const ::main_loop::main_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_loop::main_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.robot_state);
      stream.next(m.robot_case);
      stream.next(m.pos);
      stream.next(m.is_blocked);
      stream.next(m.servo_state);
      stream.next(m.stepper_state);
      stream.next(m.hand_state);
      stream.next(m.action_done);
      stream.next(m.kill_mission);
      stream.next(m.goal_covered_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct main_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_loop::main_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_loop::main_state_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "robot_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_state);
    s << indent << "robot_case: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_case);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "is_blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_blocked);
    s << indent << "servo_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo_state);
    s << indent << "stepper_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stepper_state);
    s << indent << "hand_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hand_state);
    s << indent << "action_done: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_done);
    s << indent << "kill_mission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.kill_mission);
    s << indent << "goal_covered_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_covered_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_LOOP_MESSAGE_MAIN_STATE_H
