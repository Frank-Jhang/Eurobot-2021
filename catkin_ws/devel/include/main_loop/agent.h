// Generated by gencpp from file main_loop/agent.msg
// DO NOT EDIT!


#ifndef MAIN_LOOP_MESSAGE_AGENT_H
#define MAIN_LOOP_MESSAGE_AGENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace main_loop
{
template <class ContainerAllocator>
struct agent_
{
  typedef agent_<ContainerAllocator> Type;

  agent_()
    : header()
    , emergency()
    , my_pos_x(0)
    , my_pos_y(0)
    , my_degree(0)
    , enemy1_x(0)
    , enemy1_y(0)
    , enemy2_x(0)
    , enemy2_y(0)
    , ally_x(0)
    , ally_y(0)
    , servo_state(0)
    , stepper(0)
    , hand(0)
    , status(0)
    , time(0.0)  {
    }
  agent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , emergency(_alloc)
    , my_pos_x(0)
    , my_pos_y(0)
    , my_degree(0)
    , enemy1_x(0)
    , enemy1_y(0)
    , enemy2_x(0)
    , enemy2_y(0)
    , ally_x(0)
    , ally_y(0)
    , servo_state(0)
    , stepper(0)
    , hand(0)
    , status(0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _emergency_type;
  _emergency_type emergency;

   typedef int32_t _my_pos_x_type;
  _my_pos_x_type my_pos_x;

   typedef int32_t _my_pos_y_type;
  _my_pos_y_type my_pos_y;

   typedef int32_t _my_degree_type;
  _my_degree_type my_degree;

   typedef int32_t _enemy1_x_type;
  _enemy1_x_type enemy1_x;

   typedef int32_t _enemy1_y_type;
  _enemy1_y_type enemy1_y;

   typedef int32_t _enemy2_x_type;
  _enemy2_x_type enemy2_x;

   typedef int32_t _enemy2_y_type;
  _enemy2_y_type enemy2_y;

   typedef int32_t _ally_x_type;
  _ally_x_type ally_x;

   typedef int32_t _ally_y_type;
  _ally_y_type ally_y;

   typedef int32_t _servo_state_type;
  _servo_state_type servo_state;

   typedef int32_t _stepper_type;
  _stepper_type stepper;

   typedef int32_t _hand_type;
  _hand_type hand;

   typedef int32_t _status_type;
  _status_type status;

   typedef float _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::main_loop::agent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_loop::agent_<ContainerAllocator> const> ConstPtr;

}; // struct agent_

typedef ::main_loop::agent_<std::allocator<void> > agent;

typedef boost::shared_ptr< ::main_loop::agent > agentPtr;
typedef boost::shared_ptr< ::main_loop::agent const> agentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_loop::agent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_loop::agent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace main_loop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'main_loop': ['/home/frank/catkin_ws/src/main_loop/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::agent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::agent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::agent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::agent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::agent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::agent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_loop::agent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92681a13a8cbeccba49e2d6d6d4c723f";
  }

  static const char* value(const ::main_loop::agent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92681a13a8cbeccbULL;
  static const uint64_t static_value2 = 0xa49e2d6d6d4c723fULL;
};

template<class ContainerAllocator>
struct DataType< ::main_loop::agent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_loop/agent";
  }

  static const char* value(const ::main_loop::agent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_loop::agent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool[] emergency\n"
"int32 my_pos_x\n"
"int32 my_pos_y\n"
"int32 my_degree\n"
"int32 enemy1_x\n"
"int32 enemy1_y \n"
"int32 enemy2_x\n"
"int32 enemy2_y\n"
"int32 ally_x\n"
"int32 ally_y\n"
"int32 servo_state\n"
"int32 stepper\n"
"int32 hand\n"
"int32 status\n"
"float32 time \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::main_loop::agent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_loop::agent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.emergency);
      stream.next(m.my_pos_x);
      stream.next(m.my_pos_y);
      stream.next(m.my_degree);
      stream.next(m.enemy1_x);
      stream.next(m.enemy1_y);
      stream.next(m.enemy2_x);
      stream.next(m.enemy2_y);
      stream.next(m.ally_x);
      stream.next(m.ally_y);
      stream.next(m.servo_state);
      stream.next(m.stepper);
      stream.next(m.hand);
      stream.next(m.status);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct agent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_loop::agent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_loop::agent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "emergency[]" << std::endl;
    for (size_t i = 0; i < v.emergency.size(); ++i)
    {
      s << indent << "  emergency[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.emergency[i]);
    }
    s << indent << "my_pos_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_pos_x);
    s << indent << "my_pos_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_pos_y);
    s << indent << "my_degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_degree);
    s << indent << "enemy1_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy1_x);
    s << indent << "enemy1_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy1_y);
    s << indent << "enemy2_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy2_x);
    s << indent << "enemy2_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy2_y);
    s << indent << "ally_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ally_x);
    s << indent << "ally_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ally_y);
    s << indent << "servo_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo_state);
    s << indent << "stepper: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stepper);
    s << indent << "hand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hand);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_LOOP_MESSAGE_AGENT_H
