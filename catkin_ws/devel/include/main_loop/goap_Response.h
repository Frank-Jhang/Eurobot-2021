// Generated by gencpp from file main_loop/goap_Response.msg
// DO NOT EDIT!


#ifndef MAIN_LOOP_MESSAGE_GOAP_RESPONSE_H
#define MAIN_LOOP_MESSAGE_GOAP_RESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_loop
{
template <class ContainerAllocator>
struct goap_Response_
{
  typedef goap_Response_<ContainerAllocator> Type;

  goap_Response_()
    : speed(0)
    , mode(0)
    , degree(0)
    , pos()
    , ST2()
    , is_wait(0)
    , mission_name()
    , mission_child_name()  {
    }
  goap_Response_(const ContainerAllocator& _alloc)
    : speed(0)
    , mode(0)
    , degree(0)
    , pos(_alloc)
    , ST2(_alloc)
    , is_wait(0)
    , mission_name(_alloc)
    , mission_child_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _speed_type;
  _speed_type speed;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _degree_type;
  _degree_type degree;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pos_type;
  _pos_type pos;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ST2_type;
  _ST2_type ST2;

   typedef int32_t _is_wait_type;
  _is_wait_type is_wait;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_name_type;
  _mission_name_type mission_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_child_name_type;
  _mission_child_name_type mission_child_name;





  typedef boost::shared_ptr< ::main_loop::goap_Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_loop::goap_Response_<ContainerAllocator> const> ConstPtr;

}; // struct goap_Response_

typedef ::main_loop::goap_Response_<std::allocator<void> > goap_Response;

typedef boost::shared_ptr< ::main_loop::goap_Response > goap_ResponsePtr;
typedef boost::shared_ptr< ::main_loop::goap_Response const> goap_ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_loop::goap_Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_loop::goap_Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace main_loop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'main_loop': ['/home/frank/catkin_ws/src/main_loop/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::goap_Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::goap_Response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::goap_Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::goap_Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::goap_Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::goap_Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_loop::goap_Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce46ae66d83155e3f5ebac2ba63ec815";
  }

  static const char* value(const ::main_loop::goap_Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce46ae66d83155e3ULL;
  static const uint64_t static_value2 = 0xf5ebac2ba63ec815ULL;
};

template<class ContainerAllocator>
struct DataType< ::main_loop::goap_Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_loop/goap_Response";
  }

  static const char* value(const ::main_loop::goap_Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_loop::goap_Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 speed\n"
"int32 mode\n"
"int32 degree\n"
"int32[] pos\n"
"int32[] ST2\n"
"int32 is_wait\n"
"string mission_name\n"
"string mission_child_name\n"
"\n"
;
  }

  static const char* value(const ::main_loop::goap_Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_loop::goap_Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.mode);
      stream.next(m.degree);
      stream.next(m.pos);
      stream.next(m.ST2);
      stream.next(m.is_wait);
      stream.next(m.mission_name);
      stream.next(m.mission_child_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goap_Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_loop::goap_Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_loop::goap_Response_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.degree);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "ST2[]" << std::endl;
    for (size_t i = 0; i < v.ST2.size(); ++i)
    {
      s << indent << "  ST2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ST2[i]);
    }
    s << indent << "is_wait: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_wait);
    s << indent << "mission_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_name);
    s << indent << "mission_child_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_child_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_LOOP_MESSAGE_GOAP_RESPONSE_H
