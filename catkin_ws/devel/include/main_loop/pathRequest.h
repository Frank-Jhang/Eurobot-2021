// Generated by gencpp from file main_loop/pathRequest.msg
// DO NOT EDIT!


#ifndef MAIN_LOOP_MESSAGE_PATHREQUEST_H
#define MAIN_LOOP_MESSAGE_PATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_loop
{
template <class ContainerAllocator>
struct pathRequest_
{
  typedef pathRequest_<ContainerAllocator> Type;

  pathRequest_()
    : my_pos_x(0)
    , my_pos_y(0)
    , enemy1_x(0)
    , enemy1_y(0)
    , enemy2_x(0)
    , enemy2_y(0)
    , ally_x(0)
    , ally_y(0)
    , goal_pos_x(0)
    , goal_pos_y(0)  {
    }
  pathRequest_(const ContainerAllocator& _alloc)
    : my_pos_x(0)
    , my_pos_y(0)
    , enemy1_x(0)
    , enemy1_y(0)
    , enemy2_x(0)
    , enemy2_y(0)
    , ally_x(0)
    , ally_y(0)
    , goal_pos_x(0)
    , goal_pos_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _my_pos_x_type;
  _my_pos_x_type my_pos_x;

   typedef int32_t _my_pos_y_type;
  _my_pos_y_type my_pos_y;

   typedef int32_t _enemy1_x_type;
  _enemy1_x_type enemy1_x;

   typedef int32_t _enemy1_y_type;
  _enemy1_y_type enemy1_y;

   typedef int32_t _enemy2_x_type;
  _enemy2_x_type enemy2_x;

   typedef int32_t _enemy2_y_type;
  _enemy2_y_type enemy2_y;

   typedef int32_t _ally_x_type;
  _ally_x_type ally_x;

   typedef int32_t _ally_y_type;
  _ally_y_type ally_y;

   typedef int32_t _goal_pos_x_type;
  _goal_pos_x_type goal_pos_x;

   typedef int32_t _goal_pos_y_type;
  _goal_pos_y_type goal_pos_y;





  typedef boost::shared_ptr< ::main_loop::pathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_loop::pathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pathRequest_

typedef ::main_loop::pathRequest_<std::allocator<void> > pathRequest;

typedef boost::shared_ptr< ::main_loop::pathRequest > pathRequestPtr;
typedef boost::shared_ptr< ::main_loop::pathRequest const> pathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_loop::pathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_loop::pathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace main_loop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'main_loop': ['/home/frank/catkin_ws/src/main_loop/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::pathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::pathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::pathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::pathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::pathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::pathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_loop::pathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ee927733a44912ec23514409b395933";
  }

  static const char* value(const ::main_loop::pathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ee927733a44912eULL;
  static const uint64_t static_value2 = 0xc23514409b395933ULL;
};

template<class ContainerAllocator>
struct DataType< ::main_loop::pathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_loop/pathRequest";
  }

  static const char* value(const ::main_loop::pathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_loop::pathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 my_pos_x\n"
"int32 my_pos_y\n"
"int32 enemy1_x\n"
"int32 enemy1_y\n"
"int32 enemy2_x\n"
"int32 enemy2_y\n"
"int32 ally_x\n"
"int32 ally_y\n"
"int32 goal_pos_x\n"
"int32 goal_pos_y\n"
;
  }

  static const char* value(const ::main_loop::pathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_loop::pathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.my_pos_x);
      stream.next(m.my_pos_y);
      stream.next(m.enemy1_x);
      stream.next(m.enemy1_y);
      stream.next(m.enemy2_x);
      stream.next(m.enemy2_y);
      stream.next(m.ally_x);
      stream.next(m.ally_y);
      stream.next(m.goal_pos_x);
      stream.next(m.goal_pos_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_loop::pathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_loop::pathRequest_<ContainerAllocator>& v)
  {
    s << indent << "my_pos_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_pos_x);
    s << indent << "my_pos_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.my_pos_y);
    s << indent << "enemy1_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy1_x);
    s << indent << "enemy1_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy1_y);
    s << indent << "enemy2_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy2_x);
    s << indent << "enemy2_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy2_y);
    s << indent << "ally_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ally_x);
    s << indent << "ally_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ally_y);
    s << indent << "goal_pos_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_pos_x);
    s << indent << "goal_pos_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_pos_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_LOOP_MESSAGE_PATHREQUEST_H
