// Generated by gencpp from file main_loop/from_goap.msg
// DO NOT EDIT!


#ifndef MAIN_LOOP_MESSAGE_FROM_GOAP_H
#define MAIN_LOOP_MESSAGE_FROM_GOAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_loop
{
template <class ContainerAllocator>
struct from_goap_
{
  typedef from_goap_<ContainerAllocator> Type;

  from_goap_()
    : desire_degree(0)
    , desire_speed(0)
    , desire_mode(0)
    , desire_pos()
    , desire_servo_state(0)
    , desire_stepper(0)
    , desire_hand(0)
    , is_wait(0)
    , mission_name()  {
    }
  from_goap_(const ContainerAllocator& _alloc)
    : desire_degree(0)
    , desire_speed(0)
    , desire_mode(0)
    , desire_pos(_alloc)
    , desire_servo_state(0)
    , desire_stepper(0)
    , desire_hand(0)
    , is_wait(0)
    , mission_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _desire_degree_type;
  _desire_degree_type desire_degree;

   typedef int32_t _desire_speed_type;
  _desire_speed_type desire_speed;

   typedef int32_t _desire_mode_type;
  _desire_mode_type desire_mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _desire_pos_type;
  _desire_pos_type desire_pos;

   typedef int32_t _desire_servo_state_type;
  _desire_servo_state_type desire_servo_state;

   typedef int32_t _desire_stepper_type;
  _desire_stepper_type desire_stepper;

   typedef int32_t _desire_hand_type;
  _desire_hand_type desire_hand;

   typedef int32_t _is_wait_type;
  _is_wait_type is_wait;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_name_type;
  _mission_name_type mission_name;





  typedef boost::shared_ptr< ::main_loop::from_goap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_loop::from_goap_<ContainerAllocator> const> ConstPtr;

}; // struct from_goap_

typedef ::main_loop::from_goap_<std::allocator<void> > from_goap;

typedef boost::shared_ptr< ::main_loop::from_goap > from_goapPtr;
typedef boost::shared_ptr< ::main_loop::from_goap const> from_goapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_loop::from_goap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_loop::from_goap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace main_loop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'main_loop': ['/home/frank/catkin_ws/src/main_loop/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::from_goap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_loop::from_goap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::from_goap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_loop::from_goap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::from_goap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_loop::from_goap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_loop::from_goap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "064f4f70eb75843b4e3f71d5f45d392e";
  }

  static const char* value(const ::main_loop::from_goap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x064f4f70eb75843bULL;
  static const uint64_t static_value2 = 0x4e3f71d5f45d392eULL;
};

template<class ContainerAllocator>
struct DataType< ::main_loop::from_goap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_loop/from_goap";
  }

  static const char* value(const ::main_loop::from_goap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_loop::from_goap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 desire_degree\n"
"int32 desire_speed\n"
"int32 desire_mode\n"
"int32[] desire_pos\n"
"int32 desire_servo_state\n"
"int32 desire_stepper\n"
"int32 desire_hand\n"
"int32 is_wait\n"
"string mission_name \n"
;
  }

  static const char* value(const ::main_loop::from_goap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_loop::from_goap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desire_degree);
      stream.next(m.desire_speed);
      stream.next(m.desire_mode);
      stream.next(m.desire_pos);
      stream.next(m.desire_servo_state);
      stream.next(m.desire_stepper);
      stream.next(m.desire_hand);
      stream.next(m.is_wait);
      stream.next(m.mission_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct from_goap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_loop::from_goap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_loop::from_goap_<ContainerAllocator>& v)
  {
    s << indent << "desire_degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_degree);
    s << indent << "desire_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_speed);
    s << indent << "desire_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_mode);
    s << indent << "desire_pos[]" << std::endl;
    for (size_t i = 0; i < v.desire_pos.size(); ++i)
    {
      s << indent << "  desire_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.desire_pos[i]);
    }
    s << indent << "desire_servo_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_servo_state);
    s << indent << "desire_stepper: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_stepper);
    s << indent << "desire_hand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desire_hand);
    s << indent << "is_wait: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_wait);
    s << indent << "mission_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_LOOP_MESSAGE_FROM_GOAP_H
