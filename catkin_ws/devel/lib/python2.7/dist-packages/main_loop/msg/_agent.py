# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/agent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class agent(genpy.Message):
  _md5sum = "92681a13a8cbeccba49e2d6d6d4c723f"
  _type = "main_loop/agent"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
bool[] emergency
int32 my_pos_x
int32 my_pos_y
int32 my_degree
int32 enemy1_x
int32 enemy1_y 
int32 enemy2_x
int32 enemy2_y
int32 ally_x
int32 ally_y
int32 servo_state
int32 stepper
int32 hand
int32 status
float32 time 


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','emergency','my_pos_x','my_pos_y','my_degree','enemy1_x','enemy1_y','enemy2_x','enemy2_y','ally_x','ally_y','servo_state','stepper','hand','status','time']
  _slot_types = ['std_msgs/Header','bool[]','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,emergency,my_pos_x,my_pos_y,my_degree,enemy1_x,enemy1_y,enemy2_x,enemy2_y,ally_x,ally_y,servo_state,stepper,hand,status,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(agent, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.emergency is None:
        self.emergency = []
      if self.my_pos_x is None:
        self.my_pos_x = 0
      if self.my_pos_y is None:
        self.my_pos_y = 0
      if self.my_degree is None:
        self.my_degree = 0
      if self.enemy1_x is None:
        self.enemy1_x = 0
      if self.enemy1_y is None:
        self.enemy1_y = 0
      if self.enemy2_x is None:
        self.enemy2_x = 0
      if self.enemy2_y is None:
        self.enemy2_y = 0
      if self.ally_x is None:
        self.ally_x = 0
      if self.ally_y is None:
        self.ally_y = 0
      if self.servo_state is None:
        self.servo_state = 0
      if self.stepper is None:
        self.stepper = 0
      if self.hand is None:
        self.hand = 0
      if self.status is None:
        self.status = 0
      if self.time is None:
        self.time = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.emergency = []
      self.my_pos_x = 0
      self.my_pos_y = 0
      self.my_degree = 0
      self.enemy1_x = 0
      self.enemy1_y = 0
      self.enemy2_x = 0
      self.enemy2_y = 0
      self.ally_x = 0
      self.ally_y = 0
      self.servo_state = 0
      self.stepper = 0
      self.hand = 0
      self.status = 0
      self.time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.emergency)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.emergency))
      _x = self
      buff.write(_get_struct_13if().pack(_x.my_pos_x, _x.my_pos_y, _x.my_degree, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.servo_state, _x.stepper, _x.hand, _x.status, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.emergency = struct.unpack(pattern, str[start:end])
      self.emergency = list(map(bool, self.emergency))
      _x = self
      start = end
      end += 56
      (_x.my_pos_x, _x.my_pos_y, _x.my_degree, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.servo_state, _x.stepper, _x.hand, _x.status, _x.time,) = _get_struct_13if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.emergency)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.emergency.tostring())
      _x = self
      buff.write(_get_struct_13if().pack(_x.my_pos_x, _x.my_pos_y, _x.my_degree, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.servo_state, _x.stepper, _x.hand, _x.status, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.emergency = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.emergency = list(map(bool, self.emergency))
      _x = self
      start = end
      end += 56
      (_x.my_pos_x, _x.my_pos_y, _x.my_degree, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.servo_state, _x.stepper, _x.hand, _x.status, _x.time,) = _get_struct_13if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13if = None
def _get_struct_13if():
    global _struct_13if
    if _struct_13if is None:
        _struct_13if = struct.Struct("<13if")
    return _struct_13if
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
