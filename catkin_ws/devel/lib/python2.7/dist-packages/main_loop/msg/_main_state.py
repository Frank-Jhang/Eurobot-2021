# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/main_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class main_state(genpy.Message):
  _md5sum = "71019ac3a3fa7fa9229e3eb63069ffbc"
  _type = "main_loop/main_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 status
string robot_state
string robot_case
int32[] pos
bool is_blocked
int32 servo_state
int32 stepper_state
int32 hand_state
int32 action_done
int32 kill_mission
int32 goal_covered_counter


"""
  __slots__ = ['status','robot_state','robot_case','pos','is_blocked','servo_state','stepper_state','hand_state','action_done','kill_mission','goal_covered_counter']
  _slot_types = ['int32','string','string','int32[]','bool','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,robot_state,robot_case,pos,is_blocked,servo_state,stepper_state,hand_state,action_done,kill_mission,goal_covered_counter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(main_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.robot_state is None:
        self.robot_state = ''
      if self.robot_case is None:
        self.robot_case = ''
      if self.pos is None:
        self.pos = []
      if self.is_blocked is None:
        self.is_blocked = False
      if self.servo_state is None:
        self.servo_state = 0
      if self.stepper_state is None:
        self.stepper_state = 0
      if self.hand_state is None:
        self.hand_state = 0
      if self.action_done is None:
        self.action_done = 0
      if self.kill_mission is None:
        self.kill_mission = 0
      if self.goal_covered_counter is None:
        self.goal_covered_counter = 0
    else:
      self.status = 0
      self.robot_state = ''
      self.robot_case = ''
      self.pos = []
      self.is_blocked = False
      self.servo_state = 0
      self.stepper_state = 0
      self.hand_state = 0
      self.action_done = 0
      self.kill_mission = 0
      self.goal_covered_counter = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.status))
      _x = self.robot_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_case
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos))
      _x = self
      buff.write(_get_struct_B6i().pack(_x.is_blocked, _x.servo_state, _x.stepper_state, _x.hand_state, _x.action_done, _x.kill_mission, _x.goal_covered_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state = str[start:end].decode('utf-8')
      else:
        self.robot_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_case = str[start:end].decode('utf-8')
      else:
        self.robot_case = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 25
      (_x.is_blocked, _x.servo_state, _x.stepper_state, _x.hand_state, _x.action_done, _x.kill_mission, _x.goal_covered_counter,) = _get_struct_B6i().unpack(str[start:end])
      self.is_blocked = bool(self.is_blocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.status))
      _x = self.robot_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_case
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos.tostring())
      _x = self
      buff.write(_get_struct_B6i().pack(_x.is_blocked, _x.servo_state, _x.stepper_state, _x.hand_state, _x.action_done, _x.kill_mission, _x.goal_covered_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state = str[start:end].decode('utf-8')
      else:
        self.robot_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_case = str[start:end].decode('utf-8')
      else:
        self.robot_case = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 25
      (_x.is_blocked, _x.servo_state, _x.stepper_state, _x.hand_state, _x.action_done, _x.kill_mission, _x.goal_covered_counter,) = _get_struct_B6i().unpack(str[start:end])
      self.is_blocked = bool(self.is_blocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_B6i = None
def _get_struct_B6i():
    global _struct_B6i
    if _struct_B6i is None:
        _struct_B6i = struct.Struct("<B6i")
    return _struct_B6i
