# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/from_goap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class from_goap(genpy.Message):
  _md5sum = "064f4f70eb75843b4e3f71d5f45d392e"
  _type = "main_loop/from_goap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 desire_degree
int32 desire_speed
int32 desire_mode
int32[] desire_pos
int32 desire_servo_state
int32 desire_stepper
int32 desire_hand
int32 is_wait
string mission_name 
"""
  __slots__ = ['desire_degree','desire_speed','desire_mode','desire_pos','desire_servo_state','desire_stepper','desire_hand','is_wait','mission_name']
  _slot_types = ['int32','int32','int32','int32[]','int32','int32','int32','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       desire_degree,desire_speed,desire_mode,desire_pos,desire_servo_state,desire_stepper,desire_hand,is_wait,mission_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(from_goap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.desire_degree is None:
        self.desire_degree = 0
      if self.desire_speed is None:
        self.desire_speed = 0
      if self.desire_mode is None:
        self.desire_mode = 0
      if self.desire_pos is None:
        self.desire_pos = []
      if self.desire_servo_state is None:
        self.desire_servo_state = 0
      if self.desire_stepper is None:
        self.desire_stepper = 0
      if self.desire_hand is None:
        self.desire_hand = 0
      if self.is_wait is None:
        self.is_wait = 0
      if self.mission_name is None:
        self.mission_name = ''
    else:
      self.desire_degree = 0
      self.desire_speed = 0
      self.desire_mode = 0
      self.desire_pos = []
      self.desire_servo_state = 0
      self.desire_stepper = 0
      self.desire_hand = 0
      self.is_wait = 0
      self.mission_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.desire_degree, _x.desire_speed, _x.desire_mode))
      length = len(self.desire_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.desire_pos))
      _x = self
      buff.write(_get_struct_4i().pack(_x.desire_servo_state, _x.desire_stepper, _x.desire_hand, _x.is_wait))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.desire_degree, _x.desire_speed, _x.desire_mode,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.desire_pos = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.desire_servo_state, _x.desire_stepper, _x.desire_hand, _x.is_wait,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.desire_degree, _x.desire_speed, _x.desire_mode))
      length = len(self.desire_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.desire_pos.tostring())
      _x = self
      buff.write(_get_struct_4i().pack(_x.desire_servo_state, _x.desire_stepper, _x.desire_hand, _x.is_wait))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.desire_degree, _x.desire_speed, _x.desire_mode,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.desire_pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 16
      (_x.desire_servo_state, _x.desire_stepper, _x.desire_hand, _x.is_wait,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
