# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/goap_Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class goap_Request(genpy.Message):
  _md5sum = "24e4b27fcff005a29854ec9235284e64"
  _type = "main_loop/goap_Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool action_done
int32[] pos

int32 north_or_south

float32 time
string mission_name
string mission_child_name
"""
  __slots__ = ['action_done','pos','north_or_south','time','mission_name','mission_child_name']
  _slot_types = ['bool','int32[]','int32','float32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_done,pos,north_or_south,time,mission_name,mission_child_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(goap_Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_done is None:
        self.action_done = False
      if self.pos is None:
        self.pos = []
      if self.north_or_south is None:
        self.north_or_south = 0
      if self.time is None:
        self.time = 0.
      if self.mission_name is None:
        self.mission_name = ''
      if self.mission_child_name is None:
        self.mission_child_name = ''
    else:
      self.action_done = False
      self.pos = []
      self.north_or_south = 0
      self.time = 0.
      self.mission_name = ''
      self.mission_child_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.action_done))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos))
      _x = self
      buff.write(_get_struct_if().pack(_x.north_or_south, _x.time))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mission_child_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.action_done,) = _get_struct_B().unpack(str[start:end])
      self.action_done = bool(self.action_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.north_or_south, _x.time,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_child_name = str[start:end].decode('utf-8')
      else:
        self.mission_child_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.action_done))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos.tostring())
      _x = self
      buff.write(_get_struct_if().pack(_x.north_or_south, _x.time))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mission_child_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.action_done,) = _get_struct_B().unpack(str[start:end])
      self.action_done = bool(self.action_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.north_or_south, _x.time,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_child_name = str[start:end].decode('utf-8')
      else:
        self.mission_child_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/goap_Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class goap_Response(genpy.Message):
  _md5sum = "ce46ae66d83155e3f5ebac2ba63ec815"
  _type = "main_loop/goap_Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 speed
int32 mode
int32 degree
int32[] pos
int32[] ST2
int32 is_wait
string mission_name
string mission_child_name

"""
  __slots__ = ['speed','mode','degree','pos','ST2','is_wait','mission_name','mission_child_name']
  _slot_types = ['int32','int32','int32','int32[]','int32[]','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed,mode,degree,pos,ST2,is_wait,mission_name,mission_child_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(goap_Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speed is None:
        self.speed = 0
      if self.mode is None:
        self.mode = 0
      if self.degree is None:
        self.degree = 0
      if self.pos is None:
        self.pos = []
      if self.ST2 is None:
        self.ST2 = []
      if self.is_wait is None:
        self.is_wait = 0
      if self.mission_name is None:
        self.mission_name = ''
      if self.mission_child_name is None:
        self.mission_child_name = ''
    else:
      self.speed = 0
      self.mode = 0
      self.degree = 0
      self.pos = []
      self.ST2 = []
      self.is_wait = 0
      self.mission_name = ''
      self.mission_child_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.speed, _x.mode, _x.degree))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pos))
      length = len(self.ST2)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.ST2))
      buff.write(_get_struct_i().pack(self.is_wait))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mission_child_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.speed, _x.mode, _x.degree,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ST2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.is_wait,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_child_name = str[start:end].decode('utf-8')
      else:
        self.mission_child_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.speed, _x.mode, _x.degree))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pos.tostring())
      length = len(self.ST2)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ST2.tostring())
      buff.write(_get_struct_i().pack(self.is_wait))
      _x = self.mission_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mission_child_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.speed, _x.mode, _x.degree,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ST2 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.is_wait,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_name = str[start:end].decode('utf-8')
      else:
        self.mission_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_child_name = str[start:end].decode('utf-8')
      else:
        self.mission_child_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
class goap_(object):
  _type          = 'main_loop/goap_'
  _md5sum = 'bea0114d84bf82ce48ef39139983607f'
  _request_class  = goap_Request
  _response_class = goap_Response
