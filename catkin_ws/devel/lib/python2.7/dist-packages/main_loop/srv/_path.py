# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/pathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pathRequest(genpy.Message):
  _md5sum = "9ee927733a44912ec23514409b395933"
  _type = "main_loop/pathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 my_pos_x
int32 my_pos_y
int32 enemy1_x
int32 enemy1_y
int32 enemy2_x
int32 enemy2_y
int32 ally_x
int32 ally_y
int32 goal_pos_x
int32 goal_pos_y
"""
  __slots__ = ['my_pos_x','my_pos_y','enemy1_x','enemy1_y','enemy2_x','enemy2_y','ally_x','ally_y','goal_pos_x','goal_pos_y']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       my_pos_x,my_pos_y,enemy1_x,enemy1_y,enemy2_x,enemy2_y,ally_x,ally_y,goal_pos_x,goal_pos_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.my_pos_x is None:
        self.my_pos_x = 0
      if self.my_pos_y is None:
        self.my_pos_y = 0
      if self.enemy1_x is None:
        self.enemy1_x = 0
      if self.enemy1_y is None:
        self.enemy1_y = 0
      if self.enemy2_x is None:
        self.enemy2_x = 0
      if self.enemy2_y is None:
        self.enemy2_y = 0
      if self.ally_x is None:
        self.ally_x = 0
      if self.ally_y is None:
        self.ally_y = 0
      if self.goal_pos_x is None:
        self.goal_pos_x = 0
      if self.goal_pos_y is None:
        self.goal_pos_y = 0
    else:
      self.my_pos_x = 0
      self.my_pos_y = 0
      self.enemy1_x = 0
      self.enemy1_y = 0
      self.enemy2_x = 0
      self.enemy2_y = 0
      self.ally_x = 0
      self.ally_y = 0
      self.goal_pos_x = 0
      self.goal_pos_y = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10i().pack(_x.my_pos_x, _x.my_pos_y, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.goal_pos_x, _x.goal_pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.my_pos_x, _x.my_pos_y, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.goal_pos_x, _x.goal_pos_y,) = _get_struct_10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10i().pack(_x.my_pos_x, _x.my_pos_y, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.goal_pos_x, _x.goal_pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.my_pos_x, _x.my_pos_y, _x.enemy1_x, _x.enemy1_y, _x.enemy2_x, _x.enemy2_y, _x.ally_x, _x.ally_y, _x.goal_pos_x, _x.goal_pos_y,) = _get_struct_10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10i = None
def _get_struct_10i():
    global _struct_10i
    if _struct_10i is None:
        _struct_10i = struct.Struct("<10i")
    return _struct_10i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main_loop/pathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pathResponse(genpy.Message):
  _md5sum = "3ca94551c32873de91ff62acdf329f56"
  _type = "main_loop/pathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 next_pos_x
int32 next_pos_y
float32 degree
bool blocked


"""
  __slots__ = ['next_pos_x','next_pos_y','degree','blocked']
  _slot_types = ['int32','int32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       next_pos_x,next_pos_y,degree,blocked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.next_pos_x is None:
        self.next_pos_x = 0
      if self.next_pos_y is None:
        self.next_pos_y = 0
      if self.degree is None:
        self.degree = 0.
      if self.blocked is None:
        self.blocked = False
    else:
      self.next_pos_x = 0
      self.next_pos_y = 0
      self.degree = 0.
      self.blocked = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2ifB().pack(_x.next_pos_x, _x.next_pos_y, _x.degree, _x.blocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.next_pos_x, _x.next_pos_y, _x.degree, _x.blocked,) = _get_struct_2ifB().unpack(str[start:end])
      self.blocked = bool(self.blocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2ifB().pack(_x.next_pos_x, _x.next_pos_y, _x.degree, _x.blocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.next_pos_x, _x.next_pos_y, _x.degree, _x.blocked,) = _get_struct_2ifB().unpack(str[start:end])
      self.blocked = bool(self.blocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ifB = None
def _get_struct_2ifB():
    global _struct_2ifB
    if _struct_2ifB is None:
        _struct_2ifB = struct.Struct("<2ifB")
    return _struct_2ifB
class path(object):
  _type          = 'main_loop/path'
  _md5sum = 'aa24ea267d1480041af4f206230a297f'
  _request_class  = pathRequest
  _response_class = pathResponse
